%%
% Use RANSAC to find vertical lines

function lines = findVerticalLines(edgelIm, minFitDistance)

    if ~exist('minFitDistance', 'var')
        minFitDistance = 1;
    end

    % Get columns with at least one pixel on
    yCols = find(sum(edgelIm,1) > 0);

    tempedgel = edgelIm;
    nonzeroEdgels = find(edgelIm ~= 0);
    [iInds jInds] = ind2sub(size(edgelIm), nonzeroEdgels);
    XY = [jInds iInds];

    best_error = Inf;
    best_params = {};
    
    lines = {};
    
    for z=1:size(edgelIm,2)
        
        line_params = struct();
        line_params.x0 = [z 1];
        line_params.d = [0 1];
        
        % Calculate the distance of each point to the line
        [err XYproj aMat] = Residuals_line(XY, line_params.x0, line_params.d, ...
                                      false, false);
        inlier_inds = find(err <= minFitDistance);
        
        if ~isempty(inlier_inds)

            inliers = XY(inlier_inds, :);
            inlier_projs = XYproj(inlier_inds, :);
            inlier_weights = aMat(inlier_inds);

            dist_error = err(inlier_inds);
            dist_error = sum(dist_error)/size(inliers,1);
            inlier_error = size(inliers,1)/size(tempedgel,1);

            alpha = 1;
            beta = 2;
            total_error = alpha*dist_error+beta*inlier_error;

            if(total_error < best_error)
                best_error = total_error;
                best_params = line_params;
            else
                lines{end+1} = best_params;
                best_error = Inf;
                best_params = {};
            end
        
        end

    end
    
    
%    while ~isempty(XY)
% 
%         for z=1:length(yCols)
%             line_params = struct();
%             line_params.x0 = [z 1];
%             line_params.d = [0 1];
%             
%             % Calculate the distance of each point to the line
%             [err XYproj aMat] = Residuals_line(XY, line_params.x0, line_params.d, ...
%                                           false, false);
%             inlier_inds = find(err <= minFitDistance);
%             inliers = XY(inlier_inds, :);
%             inlier_projs = XYproj(inlier_inds, :);
%             inlier_weights = aMat(inlier_inds);
%             
%             dist_error = err(inlier_inds);
%             dist_error = sum(dist_error)/size(inliers,1);
%             inlier_error = size(inliers,1)/size(tempedgel,1);
%             
%             alpha = 1;
%             beta = 2;
%             total_error = alpha*dist_error+beta*inlier_error;
%             
%             if(total_error < best_error)
%                 
%             end
%             
%             XY = XY(err > minFitDistance, :);
%             
%             [sorted_weights sorted_inds] = sort(inlier_weights);
%             projweights = [inlier_projs(sorted_inds, :) sorted_weights];
%             sortedprojections = unique(projweights, 'rows');
%             sortedweights = sortedprojections(:,3);
%         end
% 
%     end
   
end