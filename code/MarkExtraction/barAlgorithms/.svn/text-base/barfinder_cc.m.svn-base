%% Given a chart, output bars 

clear all
setupPath();
thresholds();

chart_subset_file = 'Testing/UMDbars/flat_bars.txt';
chart_path = 'UMDImages/bar';
chart_files = getchartfiles(chart_subset_file);
for i=1:length(chart_files)
    chart_files{i} = strcat(chart_files{i}, '.png');
end

outpath = fullfile(pwd, 'Testing/UMDbars');
fullpath = fullfile(corpus_root, chart_path);
cachepath = fullfile(pwd, 'cache');
% Set to "corpusbar" if using Stanford corpus, empty if using UMD.
cacheprefix = '';

% 
% fullpath = fullfile(pwd, chart_path);
% outpath = fullfile(fullpath,'output');
% 
% % Retrieve file names for test charts
% all_image_path = dir(fullpath);
% 
% chart_files = [];
% for i=1:length(all_image_path)
%     if (~isempty(strfind(all_image_path(i).name, 'jpg')) || ...
%         ~isempty(strfind(all_image_path(i).name, 'png')))
%         chart_files = [chart_files; {all_image_path(i).name}];
%     end
% end

%chart_files = {'bar_100.png', 'bar_103.png'};
chart_files = {'bar_103.png','bar_125.png','bar_127.png','bar_29.png',...
                'bar_50.png','bar_51.png','bar_56.png','bar_74.png'};

times = fopen(fullfile(outpath, 'times.txt'), 'a');
fprintf(times,'file,cc_time\n');
%for i=1:length(chart_files)
for i=1:length(chart_files)

    % Read in the image
    curFile = chart_files{i};
    %curFile = 'bar_105.png';
    extInd = strfind(curFile, '.');
    curFile_noext = curFile(1:extInd-1);
    textlocFile = fullfile(fullpath, 'text', strcat(curFile(1:extInd-1),'.txt'));
    
    fprintf(2, 'Processing %s...\n', curFile);
    
    [im imgray] = readimage(fullfile(fullpath, curFile));    
    COLOR = size(im,3) > 1;
    if ~COLOR
        im = repmat(im, [1 1 3]);
    end
    
    % Check for filtered image
    filteredIm_file = strcat(cacheprefix,curFile_noext,'_filtered_',sprintf('%d', BFILTER_WIDTH), '_', ...
         sprintf('%2.2f',BFILTER_DOMAINSIGMA),'_',sprintf('%2.2f',BFILTER_RANGESIGMA),'.mat');
    % Generate the image if it's not cached
    if ~exist(fullfile(cachepath,filteredIm_file), 'file')
        fprintf(2,'Applying bilateral filter...\n');
        bfiltert = tic;
        im = bfilter2(im, BFILTER_WIDTH, [BFILTER_DOMAINSIGMA BFILTER_RANGESIGMA]);
        bfilter_time = toc(bfiltert);
        save(fullfile(cachepath,filteredIm_file), 'im', 'BFILTER_WIDTH', ...
                                        'BFILTER_DOMAINSIGMA', 'BFILTER_RANGESIGMA','bfilter_time');
    % Retrieve the cached image
    else
        fprintf(2,'Loading cached image...\n');
        load(fullfile(cachepath,filteredIm_file));
    end
    
    % Check for cached connected components
    cc_file = strcat(cacheprefix,curFile_noext,'_colorcc_nobg.mat');
    % Generate the connected components if they aren't cached
    if ~exist(fullfile(cachepath,cc_file), 'file')
        cctic = tic;
        % Connected components method
        fprintf(2,'Finding color-connected components...\n');
        [components, n] = conncompcolor(im);
        cc_time = toc(cctic);
        save(fullfile(cachepath,cc_file), 'components','cc_time');
    % Retrieve the cached image
    else
        fprintf(2,'Loading cached components...\n');
        load(fullfile(cachepath,cc_file));
    end
    fprintf(times,'%s,%6.6f\n',curFile,cc_time);
        
    handle = imshowlarge(label2rgb(components,'jet','w','shuffle'));
    fprintf(2, 'Saving cc image...\n');
    saveImage(handle, curFile, '_colorcc.png',outpath);
    close all;


%     componentStats = regionprops(components, 'all');
%     rectThreshold = 0.95;
%     areaThreshold = 25;
%     rectangles = [];
%     for k=1:length(componentStats)
%         % Check if the component is likely a rectangle by comparing the
%         % bounding box area to the number of filled pixels. Discard any
%         % rectangles with an area less than a threshold (25).
%         curComp = componentStats(k);
%         boundingBoxArea = size(curComp.FilledImage, 1)* ...
%                           size(curComp.FilledImage, 2);
%         if (curComp.FilledArea/boundingBoxArea) > rectThreshold && ...
%                 boundingBoxArea > areaThreshold
%             rectangles = [rectangles k];
%         end
%     end
% 
%     newIm = zeros(size(components));
%     horiz_bars = 0;
%     vert_bars = 0;
%     for k=1:length(rectangles)
%         bbSize = size(componentStats(rectangles(k)).FilledImage);
%         if(bbSize(1)/bbSize(2) < 1)
%             horiz_bars = horiz_bars + 1;
%         else
%             vert_bars = vert_bars + 1;
%         end
%         newIm(componentStats(rectangles(k)).PixelIdxList) = k;
%     end
% 
%     if(horiz_bars > vert_bars)
%         alignment = 'h';
%     else
%         alignment = 'v';
%     end
% 
%     aspectratios = zeros(1,length(rectangles));
%     barThreshold = 0.05;
%     bars = [];
%     for k=1:length(rectangles)
%         bbSize = size(componentStats(rectangles(k)).FilledImage);
%         aspectratios(k) = min(bbSize)/max(bbSize);
%         if(aspectratios(k) > barThreshold)
%             bars{end+1} = componentStats(rectangles(k));
%         end
%     end
% 
%     handle = figure;
%     subplot(2,2,1);
%     imshow(im);
%     subplot(2,2,2);
%     imshow(label2rgb(components));
%     subplot(2,2,4);
%     imshow(label2rgb(newIm));
% 
%     disp('Saving connected components image...');
%     saveImage(handle, curFile, '_cc2.png', outpath);
% 
%     sprintf('Computing average color...')
%     % Compute the average color in each bar
%     for i=1:length(bars)
%         bars{i}.Color = avgColor(im, bars{i}.PixelIdxList);
%     end
% 
%     % Create a new image displaying the bars and axes
%     sprintf('Creating output bar image...')
% 
%     barImage = zeros(size(im,1),size(im,2));
%     textLocs = zeros(length(bars),2);
%     for i=1:length(bars)
%         textLocs(i,:) = bars{i}.Centroid;
%         bars{i}.SubarrayIdx;
%         size(bars{i}.Image);
%         subImage = barImage(bars{i}.SubarrayIdx{1}, bars{i}.SubarrayIdx{2});
%         barImage(bars{i}.SubarrayIdx{1}, bars{i}.SubarrayIdx{2}) = subImage + bars{i}.Image*i;
%     end
%     barImage = barImage/(max(max(barImage)));
% 
%     cmap = zeros(length(bars)+1,3);
%     cmap(1,:) = [1 1 1];
%     for i=2:length(bars)+1
%         cmap(i,:) = bars{i-1}.Color / 255;
%     end
% 
%     handle = figure;
%     imshow(barImage); colormap(cmap);  hold on;
%     plot(1:size(im,2),yLocOfXAxis,'LineWidth',2,'Color','green');
%     plot(xLocOfYAxis,1:size(im,1),'LineWidth',2,'Color','green');
% 
%     disp('Saving bar/axis image...');
%     saveImage(handle, curFile, '_bar_axis.png', outpath);
% 
%     cc_elapsed = toc
% 
%     outString = strcat(outString,sprintf(',%d\n',cc_elapsed));
% 
%     close all;
end

fclose(times);

%%

